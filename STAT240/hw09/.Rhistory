contributors()
install.packages("tidyverse")
?strsplit
mendota = read_csv("../../data/lake-mendota-winters-2022.csv")
## Load in the core tidyverse packages
##  - including ggplot2 for graphics;
##  - and dplyr for data calculations
library(tidyverse)
library(lubridate)
mendota = read_csv("../../data/lake-mendota-winters-2022.csv")
pwd
.
ls
/
mendota = read_csv("../../data/lake-mendota-winters-2022.csv")
mendota = read_csv("./../data/lake-mendota-winters-2022.csv")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE,
error = TRUE)
#library(tidyverse)
## Load in the core tidyverse packages
##  - including ggplot2 for graphics;
##  - and dplyr for data calculations
library(tidyverse)
library(lubridate)
mendota = read_csv("../../data/lake-mendota-winters-2022.csv")
mendota = read_csv("/data/lake-mendota-winters-2022.csv")
mendota = read_csv("./data/lake-mendota-winters-2022.csv")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
source("../../scripts/viridis.R")
setwd("~/Desktop/STAT 240/discussion/ds09")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(tidyverse)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
raw_chimpanzee = load_csv("./../../data/chimpanzee.csv")
raw_chimpanzee = read_csv("./../../data/chimpanzee.csv")
View(raw_chimpanzee)
raw_chimpanzee = read_csv("./../../data/chimpanzee.csv")
raw_chimpanzee
raw_chimpanzee %>%
filter(partner == 'none')
raw_chimpanzee %>%
filter(partner == 'none') %>%
prosocial_counts = no_partner %>%
summarize(
prosocial = sum(prosocial),
total = n()
)
no_partner %>%
summarize(
prosocial = sum(prosocial),
selfish = sum(selfish)
)
raw_chimpanzee = read_csv("./../../data/chimpanzee.csv")
no_partner = raw_chimpanzee %>%
filter(partner == 'none')
no_partner %>%
summarize(
prosocial = sum(prosocial),
selfish = sum(selfish)
)
prosocial_counts = no_partner %>%
summarize(
prosocial = sum(prosocial),
total = n()
)
prosocial_counts
prosocial_counts = no_partner %>%
summarize(
prosocial = sum(prosocial),
total = sum(selfish) + sum(prosocial)
)
prosocial_counts
x = 83
n = 180
p_tilde = (x+2)/(n+4)
p_tilde
se_agresti = binom_se(n+4, p_tilde)
binom_se =  function(n, p){
return ( sqrt( p*(1-p)/n) )
}
x = 83
n = 180
p_tilde = (x+2)/(n+4)
p_tilde
se_agresti = binom_se(n+4, p_tilde)
se_agresti
ci_agresti = binom_ci(p_tilde, se_agresti)
binom_se =  function(n, p){
return ( sqrt( p*(1-p)/n) )
}
binom_ci = function(est, se, conf=0.95){
z = qnorm(1 - (1 - conf)/2)
me = z * se
ci = est + c(-1,1)*me
return(ci)
}
x = 83
n = 180
p_tilde = (x+2)/(n+4)
p_tilde
se_agresti = binom_se(n+4, p_tilde)
se_agresti
ci_agresti = binom_ci(p_tilde, se_agresti)
round(ci_agresti, 3)
binom_se =  function(n, p){
return ( sqrt( p*(1-p)/n) )
}
binom_ci = function(est, se, conf=0.95){
z = qnorm(1 - (1 - conf)/2)
me = z * se
ci = est + c(-1,1)*me
return(ci)
}
agresti_ci = function(n, x, conf=0.95)
{
p_tilde = (x+2)/(n+4)
se = binom_se(n+4, p_tilde)
ci = binom_ci(p_tilde, se, conf)
return ( ci )
}
x = 83
n = 180
p_tilde = (x+2)/(n+4)
p_tilde
se_agresti = binom_se(n+4, p_tilde)
se_agresti
ci_agresti = binom_ci(p_tilde, se_agresti)
round(ci_agresti, 3)
raw_chimpanzee
gbinom(180, 0.5, scale=TRUE) +
geom_vline(xintercept=60, color="red",
linetype="dashed") +
theme_bw()
gbinom(180, 0.5, scale=TRUE) +
geom_vline(xintercept=83, color="red",
linetype="dashed") +
theme_bw()
gbinom(180, 0.5, scale=TRUE) +
geom_vline(xintercept=83, color="red",
linetype="dashed") +
theme_bw()
pvalue = pbinom(83, 180, 0.5) + (1 - pbinom(96, 90, 0.5))
pvalue
gbinom(180, 0.5, scale=TRUE) +
geom_vline(xintercept=83, color="red",
linetype="dashed") +
theme_bw()
pvalue = pbinom(83, 180, 0.5) + (1 - pbinom(96, 180, 0.5))
pvalue
gbinom(180, 0.5, scale=TRUE) +
geom_vline(xintercept=83, color="red",
linetype="dashed") +
theme_bw()
pvalue = pbinom(83, 180, 0.5) * 2
pvalue
1/0.3325791
## right tail
gbinom(180, 0.5, a=97, b=180) +
geom_binom_density(180, 0.5, a=58, b =59, color = "gray") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw()
## left tail
gbinom(180, 0.5, a=0, b=83) +
geom_binom_density(180, 0.5, a=31, b =32, color = "gray") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw()
## right tail
gbinom(180, 0.5, a=97, b=180) +
geom_binom_density(180, 0.5, a=95, b =96, color = "gray") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw()
## left tail
gbinom(180, 0.5, a=0, b=83) +
geom_binom_density(180, 0.5, a=84, b =85, color = "gray") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw()
## right tail
gbinom(180, 0.5) +
geom_binom_density(180, 0.5, a=97, b =180, color = "red") +
geom_binom_density(180, 0.5, a=0, b =83, color = "red") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw()
## left tail
gbinom(180, 0.5, a=0, b=83) +
geom_binom_density(180, 0.5, a=84, b =85, color = "gray") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw()
## right tail
gbinom(180, 0.5, a=0, b=180) +
geom_binom_density(180, 0.5, a=97, b =180, color = "red") +
geom_binom_density(180, 0.5, a=0, b =83, color = "red") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw()
## left tail
gbinom(180, 0.5, a=0, b=83) +
geom_binom_density(180, 0.5, a=84, b =85, color = "gray") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw()
## right tail
gbinom(180, 0.5, a=0, b=180) +
geom_binom_density(180, 0.5, a=97, b =180, color = "red") +
geom_binom_density(180, 0.5, a=0, b =83, color = "red") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw()
## left and right tail
gbinom(180, 0.5) +
geom_binom_density(180, 0.5, a=97, b =180, color = "red") +
geom_binom_density(180, 0.5, a=0, b =83, color = "red") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw()
## left and right tail
gbinom(180, 0.5) +
geom_binom_density(180, 0.5, a=97, b =180, color = "red") +
geom_binom_density(180, 0.5, a=0, b =83, color = "red") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw() +
labels(xaxis="Number of Pro-Social Choices Chimpanzee makes")
## left and right tail
gbinom(180, 0.5) +
geom_binom_density(180, 0.5, a=97, b =180, color = "red") +
geom_binom_density(180, 0.5, a=0, b =83, color = "red") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw() +
xlab("Number of Pro-Social Choices Chimpanzee makes")
## left and right tail
gbinom(180, 0.5) +
geom_binom_density(180, 0.5, a=97, b =180, color = "red") +
geom_binom_density(180, 0.5, a=0, b =83, color = "red") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw() +
xlab("Number of Pro-Social Choices Chimpanzee makes") +
ggtitle("Binomial Distribution of Pro-Social Choices Chimanzee makes with the ")
## left and right tail
gbinom(180, 0.5) +
geom_binom_density(180, 0.5, a=97, b =180, color = "red") +
geom_binom_density(180, 0.5, a=0, b =83, color = "red") +
geom_hline(yintercept = dbinom(83,180,0.5), color = "red", linetype = "dashed") +
theme_bw() +
xlab("Number of Pro-Social Choices Made") +
ylab("Probability Density") +
ggtitle("Visualization of P-Value for Pro-Social Choices in Chimpanzees") +
labs(subtitle = "Red shaded areas represent the p-value corresponding to extreme outcomes under the null hypothesis",
caption = "Data Source: Chimpanzee Behavior Study")
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE, error = TRUE, fig.height = 3)
library(tidyverse)
library(kableExtra)
library(broman)
setwd("~/Desktop/STAT 240/homework/hw09")
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE, error = TRUE, fig.height = 3)
library(tidyverse)
library(kableExtra)
library(broman)
install.packages("broman")
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE, error = TRUE, fig.height = 3)
library(tidyverse)
library(kableExtra)
library(broman)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
theme_set(theme_minimal())
qnorm(0.2, 200, 40)
# Find point where area under graph is 0.1
left_point = qnorm(0.2, 200, 40)
right_point = 200 + (200-qnorm(0.2, 200, 40))
left_point
right_point
mu <- 200
sigma <- 40
x1 <- qnorm(0.1, mean = mu, sd = sigma)
x2 <- qnorm(0.9, mean = mu, sd = sigma)
cat("x1 is:", x1, "\n")
cat("x2 is:", x2, "\n")
gnorm(mu, sigma) +
geom_norm_density(mu, sigma, a = x1, b = x2)
theme_minimal() +
labs(title="Normal Distribution N(200,40)",
x="X",
y="Density") +
geom_vline(xintercept = mu, linetype="dashed", color = "red")
mu <- 200
sigma <- 40
x1 <- qnorm(0.1, mean = mu, sd = sigma)
x2 <- qnorm(0.9, mean = mu, sd = sigma)
cat("x1 is:", x1, "\n")
cat("x2 is:", x2, "\n")
gnorm(mu, sigma) +
gnorm(mu, sigma, a = x1, b = x2, fill="red")
mu <- 200
sigma <- 40
x1 <- qnorm(0.1, mean = mu, sd = sigma)
x2 <- qnorm(0.9, mean = mu, sd = sigma)
cat("x1 is:", x1, "\n")
cat("x2 is:", x2, "\n")
gnorm(mu, sigma) +
geom_norm_density(mu, sigma, a = x1, b = x2)
theme_minimal() +
labs(title="Normal Distribution N(200,40)",
x="X",
y="Density") +
geom_vline(xintercept = mu, linetype="dashed", color = "red")
mu <- 200
sigma <- 40
x1 <- qnorm(0.1, mean = mu, sd = sigma)
x2 <- qnorm(0.9, mean = mu, sd = sigma)
cat("x1 is:", x1, "\n")
cat("x2 is:", x2, "\n")
gnorm(mu, sigma) +
geom_norm_density(mu, sigma, a = x1, b = x2) +
theme_minimal() +
labs(title="Normal Distribution N(200,40)",
x="X",
y="Density") +
geom_vline(xintercept = mu, linetype="dashed", color = "red")
mu <- 200
sigma <- 40
x1 <- qnorm(0.1, mean = mu, sd = sigma)
x2 <- qnorm(0.9, mean = mu, sd = sigma)
cat("x1 is:", x1, "\n")
cat("x2 is:", x2, "\n")
gnorm(mu, sigma) +
gnorm(mu, sigma, a = x1, b = x2, fill = "red") +
theme_minimal() +
labs(title="Normal Distribution N(200,40)",
x="X",
y="Density") +
geom_vline(xintercept = mu, linetype="dashed", color = "red")
mu <- 200
sigma <- 40
x1 <- qnorm(0.1, mean = mu, sd = sigma)
x2 <- qnorm(0.9, mean = mu, sd = sigma)
cat("x1 is:", x1, "\n")
cat("x2 is:", x2, "\n")
gnorm(mu, sigma) +
geom_norm_fill(mu, sigma, a = x1, b = x2) +
theme_minimal() +
labs(title="Normal Distribution N(200,40)",
x="X",
y="Density") +
geom_vline(xintercept = mu, linetype="dashed", color = "red")
mu2 <- 70
sigma2 <- 3
two_meters_tall <- 1 - pnorm(2 * 39.37, mean = mu2, sd = sigma2)
cat("proportion of American adult males are taller than two meters tall is:", two_meters_tall, "\n")
qnorm(0.35)
pnorm(0.35)
cat("The probability of observing 35 heads or fewer, calculated using an exact model is:", pnorm(0.35), "\n")
pbinom(35, 100, 0.5)
cat("The probability of observing 35 heads or fewer, calculated using an exact model is:", pnorm(0.35), "\n")
pbinom(35, 100, 0.5)
cat("The probability of observing 35 heads or fewer, calculated using an exact model is:", pnorm(0.35), "\n")
cat("The probability of observing 35 heads or fewer, calculated using an exact model is:", pbinom(35, 100, 0.5), "\n")
cat("The probability of observing 35 heads or fewer, calculated using a normal approximation is:", pnorm(0.35), "\n")
cat("The relative error is:", pnorm(0.35), "\n")
flips <- 100
observed_heads <- 35
# Exact probability using a binomial test
exact_probability <- pbinom(observed_heads, flips, prob = 0.5)
mu3 <- (flips * 0.5)
sigma3 <- sqrt(flips * 0.5 * (1 - 0.5))
normal_approx <- pnorm(observed_heads + 0.5, mu3, sigma3)
relative_error <- abs(exact_probability - normal_approx) / exact_probability * 100
cat("The probability using normal approximation is:", normal_approx, "\n")
cat("The relative error in the normal approximation is:", relative_error, "%\n")
flips <- 100
observed_heads <- 35
# Exact probability using a binomial test
exact_probability <- pbinom(observed_heads, flips, prob = 0.5)
mu3 <- (flips * 0.5)
sigma3 <- sqrt(flips * 0.5 * (1 - 0.5))
normal_approx <- pnorm((observed_heads + 0.5 - (flips * 0.5)) / sqrt(flips * 0.5 * (1 - 0.5)))
relative_error <- abs(exact_probability - normal_approx) / exact_probability * 100
cat("The probability using normal approximation is:", normal_approx, "\n")
cat("The relative error in the normal approximation is:", relative_error, "%\n")
flips <- 100
observed_heads <- 35
# Exact probability using a binomial test
exact_probability <- pbinom(observed_heads, flips, prob = 0.5)
mu3 <- (flips * 0.5)
sigma3 <- sqrt(flips * 0.5 * (1 - 0.5))
normal_approx <- pnorm(observed_heads + 0.5, mu3, sigma3)
relative_error <- abs(exact_probability - normal_approx) / exact_probability * 100
cat("The probability using normal approximation is:", normal_approx, "\n")
cat("The relative error in the normal approximation is:", relative_error, "%\n")
flips <- 100
observed_heads <- 35
# Exact probability using a binomial test
exact_probability <- pbinom(observed_heads, flips, prob = 0.5)
mu3 <- (flips * 0.5)
sigma3 <- sqrt(flips * 0.5 * (1 - 0.5))
normal_approx <- pnorm(observed_heads + 0.5, mu3, sigma3)
relative_error <- abs(exact_probability - normal_approx) / exact_probability * 100
cat("The probability using normal approximation is:", normal_approx, "\n")
cat("The relative error in the normal approximation is:", relative_error, "%\n")
# Calculating the value of p where observing 35 or fewer heads has at least 0.05 probability
lower_p_value <- qbinom(0.05, flips, observed_heads / flips) / flips
cat("The value of p for which the probability of observing 35 or fewer heads is at least 0.05 is:", round(lower_p_value, 2), "\n")
raw_chimpanzee = read_csv("./../../data/chimpanzee.csv")
raw_chimpanzee = read_csv("./../../data/chimpanzee.csv")
raw_chimpanzee
raw_chimpanzee = read_csv("./../../data/chimpanzee.csv")
raw_chimpanzee %>%
group_by(partner == 'none')
raw_chimpanzee = read_csv("./../../data/chimpanzee.csv")
raw_chimpanzee %>%
group_by(partner == 'none') %>%
summarise(prosocial = sum(prosocial),
selfish = sum(selfish),
n = sum(prosocial) + sum(selfish),
p_prosocial = sum(prosocial) / (sum(prosocial) + sum(selfish)))
raw_chimpanzee = read_csv("./../../data/chimpanzee.csv")
raw_chimpanzee %>%
group_by(partner == 'none') %>%
summarise(partner = (partner == 'none'),
prosocial = sum(prosocial),
selfish = sum(selfish),
n = sum(prosocial) + sum(selfish),
p_prosocial = sum(prosocial) / (sum(prosocial) + sum(selfish)))
raw_chimpanzee = read_csv("./../../data/chimpanzee.csv")
raw_chimpanzee %>%
mutate(partner_present = !(partner == 'none')) %>%
group_by(partner_present) %>%
summarise(prosocial = sum(prosocial),
selfish = sum(selfish),
n = sum(prosocial) + sum(selfish),
p_prosocial = sum(prosocial) / (sum(prosocial) + sum(selfish)))
raw_chimpanzee = read_csv("./../../data/chimpanzee.csv")
raw_chimpanzee %>%
mutate(partner_present = !(partner == 'none')) %>%
group_by(partner_present) %>%
summarise(prosocial = sum(prosocial),
selfish = sum(selfish),
n = n(),
p_prosocial = prosocial / n)
raw_chimpanzee = read_csv("./../../data/chimpanzee.csv")
raw_chimpanzee %>%
mutate(partner_present = !(partner == 'none')) %>%
group_by(partner_present) %>%
summarise(prosocial = sum(prosocial),
selfish = sum(selfish),
n = sum(prosocial) + sum(selfish),
p_prosocial = sum(prosocial) / (sum(prosocial) + sum(selfish)))
raw_chimpanzee = read_csv("./../../data/chimpanzee.csv")
summarized_data = raw_chimpanzee %>%
mutate(partner_present = !(partner == 'none')) %>%
group_by(partner_present) %>%
summarise(prosocial = sum(prosocial),
selfish = sum(selfish),
n = sum(prosocial) + sum(selfish),
p_prosocial = sum(prosocial) / (sum(prosocial) + sum(selfish)))
print(summarized_data, n = Inf)
binom_se =  function(n, p){
return ( sqrt( p*(1-p)/n) )
}
binom_ci = function(est, se, conf=0.95){
z = qnorm(1 - (1 - conf)/2)
me = z * se
ci = est + c(-1,1)*me
return(ci)
}
# For trials with a partner
x1 <- 359
n1 <- 610
p_tilde1 <- (x1 + 2) / (n1 + 4)
se_agresti1 <- binom_se(n1 + 4, p_tilde1)
ci_agresti1 <- binom_ci(p_tilde1, se_agresti1)
# For trials without a partner
x2 <- 83
n2 <- 180
p_tilde2 <- (x2 + 2) / (n2 + 4)
se_agresti2 <- binom_se(n2 + 4, p_tilde2)
ci_agresti2 <- binom_ci(p_tilde2, se_agresti2)
diff_est <- p_tilde1 - p_tilde2
diff_se <- sqrt(se_agresti1^2 + se_agresti2^2)
ci_diff <- binom_ci(diff_est, diff_se)
round(ci_diff, 3)
gbinom(610, 0.5, scale=TRUE) +
geom_vline(xintercept=359, color="red",
linetype="dashed") +
theme_bw()
pvalue = pbinom(255, 610, 0.5) + (1 - pbinom(358, 610, 0.5))
pvalue
pvalue = pbinom(255, 610, 0.5) + (1 - pbinom(358, 610, 0.5))
pvalue
p_lower = pbinom(359, 610, 0.5)
p_upper = 1 - pbinom(358, 610, 0.5)
p_value = 2 * min(p_lower, p_upper)
p_lower = pbinom(359, 610, 0.5)
p_upper = 1 - pbinom(358, 610, 0.5)
2 * min(p_lower, p_upper)
p_lower = pbinom(359, 610, 0.5)
p_upper = 1 - pbinom(358, 610, 0.5)
2 * min(p_lower, p_upper)
p_lower
p_upper
pvalue = pbinom(251, 610, 0.5) + (1 - pbinom(358, 610, 0.5))
pvalue
pvalue2 = sum(dbinom(c(0:251,359:610), 610, 0.5))
pvalue2
pvalue2 = pbinom(83, 180, 0.5) + (1 - pbinom(96, 180, 0.5))
pvalue2
