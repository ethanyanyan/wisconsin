p_values[i] <- calculate_p_value(observed_runs[i], proportion_heads_distribution)
}
split = function(str) strsplit(str, split="")[[1]]
calculate_proportion_heads <- function(flips) {
num_heads <- sum(flips == "H")
proportion_heads <- num_heads / length(flips)
return(proportion_heads)
}
simulate_flips <- function(n) {
flips <- sample(c("H", "T"), size = n, replace = TRUE)
return(flips)
}
simulate_proportion_heads <- function(n, num_simulations) {
proportions <- replicate(num_simulations, {
simulated_flips <- simulate_flips(n)
calculate_proportion_heads(simulated_flips)
})
return(proportions)
}
NMC <- 1e5
num_flips <- nchar(flips1)
proportion_heads_distribution <- simulate_proportion_heads(num_flips, NMC)
calculate_p_value <- function(observed_runs, runs_distribution) {
less_than_observed <- mean(runs_distribution <= observed_runs)
greater_than_observed <- mean(runs_distribution >= observed_runs)
p_value <- 2 * min(less_than_observed, greater_than_observed)
p_value <- min(p_value, 1)
return(p_value)
}
sequences <- list(flips1, flips2, flips3, flips4, flips5, flips6)
observed_runs <- numeric(length(sequences))
p_values <- numeric(length(sequences))
for (i in seq_along(sequences)) {
observed_runs[i] <- simulate_proportion_heads(split(sequences[[i]]))
p_values[i] <- calculate_p_value(observed_runs[i], proportion_heads_distribution)
}
split = function(str) strsplit(str, split="")[[1]]
calculate_proportion_heads <- function(flips) {
num_heads <- sum(flips == "H")
proportion_heads <- num_heads / length(flips)
return(proportion_heads)
}
simulate_flips <- function(n) {
flips <- sample(c("H", "T"), size = n, replace = TRUE)
return(flips)
}
simulate_proportion_heads <- function(n, num_simulations) {
proportions <- replicate(num_simulations, {
simulated_flips <- simulate_flips(n)
calculate_proportion_heads(simulated_flips)
})
return(proportions)
}
NMC <- 1e5
num_flips <- nchar(flips1)
proportion_heads_distribution <- simulate_proportion_heads(num_flips, NMC)
calculate_p_value <- function(observed_runs, runs_distribution) {
less_than_observed <- mean(runs_distribution <= observed_runs)
greater_than_observed <- mean(runs_distribution >= observed_runs)
p_value <- 2 * min(less_than_observed, greater_than_observed)
p_value <- min(p_value, 1)
return(p_value)
}
sequences <- list(flips1, flips2, flips3, flips4, flips5, flips6)
observed_runs <- numeric(length(sequences))
p_values <- numeric(length(sequences))
for (i in seq_along(sequences)) {
observed_runs[i] <- calculate_proportion_heads(split(sequences[[i]]))
p_values[i] <- calculate_p_value(observed_runs[i], proportion_heads_distribution)
}
# Generate histogram for visualization
hist(proportion_heads_distribution,
main = "Distribution of Proportion of Heads in Randomly Generated Sequences",
xlab = "Proportion of Heads",
ylab = "Frequency",
col = "lightblue",
border = "blue",
breaks = 50)
max_freq <- max(hist(proportion_heads_distribution, plot = FALSE)$counts)
for (obs_run in observed_runs) {
lines(x = c(obs_run, obs_run), y = c(0, max_freq * 0.9), col = "red", lwd = 1)
}
legend("topleft", legend = paste("Proportion Heads:", observed_runs), col = "red", lty = 1, cex = 0.8)
p_values
split = function(str) strsplit(str, split="")[[1]]
calculate_proportion_heads <- function(flips) {
num_heads <- sum(flips == "H")
proportion_heads <- num_heads / length(flips)
return(proportion_heads)
}
simulate_flips <- function(n) {
flips <- sample(c("H", "T"), size = n, replace = TRUE)
return(flips)
}
simulate_proportion_heads <- function(n, num_simulations) {
proportions <- replicate(num_simulations, {
simulated_flips <- simulate_flips(n)
calculate_proportion_heads(simulated_flips)
})
return(proportions)
}
NMC <- 1e5
num_flips <- nchar(flips1)
proportion_heads_distribution <- simulate_proportion_heads(num_flips, NMC)
calculate_p_value <- function(observed_runs, runs_distribution) {
less_than_observed <- mean(runs_distribution <= observed_runs)
greater_than_observed <- mean(runs_distribution >= observed_runs)
p_value <- 2 * min(less_than_observed, greater_than_observed)
p_value <- min(p_value, 1)
return(p_value)
}
sequences <- list(flips1, flips2, flips3, flips4, flips5, flips6)
observed_runs <- numeric(length(sequences))
p_values <- numeric(length(sequences))
for (i in seq_along(sequences)) {
observed_runs[i] <- calculate_proportion_heads(split(sequences[[i]]))
p_values[i] <- calculate_p_value(observed_runs[i], proportion_heads_distribution)
}
# Generate histogram for visualization
hist(proportion_heads_distribution,
main = "Distribution of Proportion of Heads in Randomly Generated Sequences",
xlab = "Proportion of Heads",
ylab = "Frequency",
col = "lightblue",
border = "blue",
breaks = 50)
max_freq <- max(hist(proportion_heads_distribution, plot = FALSE)$counts)
for (obs_run in observed_runs) {
lines(x = c(obs_run, obs_run), y = c(0, max_freq * 0.9), col = "red", lwd = 1)
}
legend("topright", legend = paste("Proportion Heads:", observed_runs), col = "red", lty = 1, cex = 0.8)
p_values
split = function(str) strsplit(str, split="")[[1]]
calculate_proportion_heads <- function(flips) {
num_heads <- sum(flips == "H")
proportion_heads <- num_heads / length(flips)
return(proportion_heads)
}
simulate_flips <- function(n) {
flips <- sample(c("H", "T"), size = n, replace = TRUE)
return(flips)
}
simulate_proportion_heads <- function(n, num_simulations) {
proportions <- replicate(num_simulations, {
simulated_flips <- simulate_flips(n)
calculate_proportion_heads(simulated_flips)
})
return(proportions)
}
NMC <- 1e5
num_flips <- nchar(flips1)
proportion_heads_distribution <- simulate_proportion_heads(num_flips, NMC)
calculate_p_value <- function(observed_runs, runs_distribution) {
less_than_observed <- mean(runs_distribution <= observed_runs)
greater_than_observed <- mean(runs_distribution >= observed_runs)
p_value <- 2 * min(less_than_observed, greater_than_observed)
p_value <- min(p_value, 1)
return(p_value)
}
sequences <- list(flips1, flips2, flips3, flips4, flips5, flips6)
observed_runs <- numeric(length(sequences))
p_values <- numeric(length(sequences))
for (i in seq_along(sequences)) {
observed_runs[i] <- calculate_proportion_heads(split(sequences[[i]]))
p_values[i] <- calculate_p_value(observed_runs[i], proportion_heads_distribution)
}
# Generate histogram for visualization
hist(proportion_heads_distribution,
main = "Distribution of Proportion of Heads in Randomly Generated Sequences",
xlab = "Proportion of Heads",
ylab = "Frequency",
col = "lightblue",
border = "blue",
breaks = 50)
max_freq <- max(hist(proportion_heads_distribution, plot = FALSE)$counts)
for (obs_run in observed_runs) {
lines(x = c(obs_run, obs_run), y = c(0, max_freq * 0.9), col = "red", lwd = 1)
}
legend("topright", legend = paste("Proportion Heads:", observed_runs), col = "red", lty = 1, cex = 0.6)
p_values
split = function(str) strsplit(str, split="")[[1]]
calculate_alternation_rate <- function(flips) {
changes <- sum(diff(flips == "H") != 0)
total_changes_possible <- length(flips) - 1
alternation_rate <- changes / total_changes_possible
return(alternation_rate)
}
simulate_flips <- function(n) {
flips <- sample(c("H", "T"), size = n, replace = TRUE)
return(flips)
}
simulate_alternation_rates <- function(n, num_simulations) {
rates <- replicate(num_simulations, {
simulated_flips <- simulate_flips(n)
calculate_alternation_rate(simulated_flips)
})
return(rates)
}
NMC <- 1e5
num_flips <- nchar(flips1)
alternation_rate_distribution <- simulate_alternation_rates(num_flips, NMC)
calculate_p_value <- function(observed_runs, runs_distribution) {
less_than_observed <- mean(runs_distribution <= observed_runs)
greater_than_observed <- mean(runs_distribution >= observed_runs)
p_value <- 2 * min(less_than_observed, greater_than_observed)
p_value <- min(p_value, 1)
return(p_value)
}
sequences <- list(flips1, flips2, flips3, flips4, flips5, flips6)
observed_runs <- numeric(length(sequences))
p_values <- numeric(length(sequences))
for (i in seq_along(sequences)) {
observed_runs[i] <- calculate_alternation_rate(split(sequences[[i]]))
p_values[i] <- calculate_p_value(observed_runs[i], alternation_rate_distribution)
}
# Generate histogram for visualization
hist(alternation_rate_distribution,
main = "Distribution of Alternation Rate in Randomly Generated Sequences",
xlab = "Alternation Rate",
ylab = "Frequency",
col = "lightblue",
border = "blue",
breaks = 50)
max_freq <- max(hist(proportion_heads_distribution, plot = FALSE)$counts)
for (obs_run in observed_runs) {
lines(x = c(obs_run, obs_run), y = c(0, max_freq * 0.9), col = "red", lwd = 1)
}
legend("topright", legend = paste("Alternation Rate:", observed_runs), col = "red", lty = 1, cex = 0.6)
p_values
(log(0.05))/log(0.5)
N <- log(0.05)/log(0.5)
N
X <- read.csv("uniform_sample.csv")$x
X <- read.csv("./uniform_sample.csv")$x
X <- read_csv("./uniform_sample.csv")$x
setwd("~/Desktop/STAT 340/homework/hw05")
X <- read.csv("uniform_sample.csv")$x
X
max(X)
hist(X)
set.seed(42)  # For reproducibility
n <- 50
num_simulations <- 1000
simulated_max_values <- replicate(num_simulations, max(runif(n, 0, 1)))
hist(simulated_max_values, breaks=30, main="Simulated Distribution of Maximum Values Under H0", xlab="Maximum Value")
observed_max <- max(X)
p_value_lower <- sum(simulated_max_values <= observed_max) / num_simulations
p_value_upper <- sum(simulated_max_values >= observed_max) / num_simulations
p_value <- 2 * min(p_value_lower, p_value_upper)
p_value
set.seed(42)  # For reproducibility
n <- 50
num_simulations <- 10000
simulated_max_values <- replicate(num_simulations, max(runif(n, 0, 1)))
hist(simulated_max_values, breaks=30, main="Simulated Distribution of Maximum Values Under H0", xlab="Maximum Value")
observed_max <- max(X)
abline(v = observed_max, col = "red")
p_value_lower <- sum(simulated_max_values <= observed_max) / num_simulations
p_value_upper <- sum(simulated_max_values >= observed_max) / num_simulations
p_value <- 2 * min(p_value_lower, p_value_upper)
p_value
set.seed(42)  # For reproducibility
n <- 50
num_simulations <- 100000
simulated_max_values <- replicate(num_simulations, max(runif(n, 0, 1)))
hist(simulated_max_values, breaks=30, main="Simulated Distribution of Maximum Values Under H0", xlab="Maximum Value")
observed_max <- max(X)
abline(v = observed_max, col = "red")
p_value_lower <- sum(simulated_max_values <= observed_max) / num_simulations
p_value_upper <- sum(simulated_max_values >= observed_max) / num_simulations
p_value <- min(p_value_lower, p_value_upper)
p_value
n <- 50
num_simulations <- 100000
simulated_max_values <- replicate(num_simulations, max(runif(n, 0, 1)))
hist(simulated_max_values, breaks=30, main="Simulated Distribution of Maximum Values Under H0", xlab="Maximum Value")
observed_max <- max(X)
abline(v = observed_max, col = "red")
p_value_lower <- sum(simulated_max_values <= observed_max) / num_simulations
p_value_upper <- sum(simulated_max_values >= observed_max) / num_simulations
p_value <- min(p_value_lower, p_value_upper)
p_value
p_value_lower <- sum(simulated_max_values <= observed_max) / num_simulations
p_value_upper <- sum(simulated_max_values >= observed_max) / num_simulations
p_value <- min(p_value_lower, p_value_upper)
p_value
temp <- read.csv("annual_avg_temp.csv")
temps <- temp$Annual.Average.Temperature.F
plot(temp, type="l")
temps
calculate_temp_differences <- function(temps) {
temp_diffs <- diff(temps)
return(sum(temp_diffs))
}
NMC <- 1e5
temps_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps)
temps_distribution[i] <- calculate_temp_differences(sampled_temps)
}
calculate_temp_differences <- function(temps) {
temp_diffs <- diff(temps)
return(sum(temp_diffs))
}
NMC <- 1e5
temps_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps)
temps_distribution[i] <- calculate_temp_differences(sampled_temps)
}
temps_distribution
calculate_temp_differences <- function(temps) {
temp_diffs <- diff(temps)
return(sum(temp_diffs))
}
NMC <- 1e5
temps_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps)
temps_distribution[i] <- calculate_temp_differences(sampled_temps)
}
hist(temps_distribution)
calculate_temp_differences <- function(temps) {
temp_diffs <- diff(temps)
return(sum(temp_diffs))
}
NMC <- 1e5
temps_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps, replace = FALSE)
temps_distribution[i] <- calculate_temp_differences(sampled_temps)
}
hist(temps_distribution, breaks = 50, col = "skyblue", border = "white",
main = "Histogram of Simulated Temperature Differences",
xlab = "Sum of Temperature Differences", ylab = "Frequency")
density <- density(temps_distribution)
lines(density, col = "red", lwd = 2)
calculate_temp_differences <- function(temps) {
temp_diffs <- diff(temps)
return(sum(temp_diffs))
}
NMC <- 1e5
temps_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps, replace = FALSE)
temps_distribution[i] <- calculate_temp_differences(sampled_temps)
}
hist(temps_distribution, breaks = 50, col = "blue", border = "white",
main = "Histogram of Simulated Temperature Differences",
xlab = "Sum of Temperature Differences", ylab = "Frequency")
calculate_temp_differences <- function(temps) {
temp_diffs <- diff(temps)
return(sum(temp_diffs))
}
NMC <- 1e5
temps_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps, replace = FALSE)
temps_distribution[i] <- calculate_temp_differences(sampled_temps)
}
hist(temps_distribution, breaks = 50, col = "blue", border = "white",
main = "Histogram of Simulated Temperature Differences",
xlab = "Sum of Temperature Differences", ylab = "Frequency")
observed_sum <- calculate_temp_differences(temps)
abline(v = observed_sum, col = "red")
p_value_lower <- sum(simulated_max_values <= observed_max) / num_simulations
p_value_lower
p_value_upper <- sum(simulated_max_values >= observed_max) / num_simulations
p_value_upper * 2
p_value_upper <- sum(temps_distribution >= observed_sum) / num_simulations
p_value_upper * 2
calculate_temp_differences <- function(temps) {
temp_diffs <- diff(temps)
return(sum(temp_diffs))
}
NMC <- 1e6
temps_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps, replace = FALSE)
temps_distribution[i] <- calculate_temp_differences(sampled_temps)
}
hist(temps_distribution, breaks = 50, col = "blue", border = "white",
main = "Histogram of Simulated Temperature Differences",
xlab = "Sum of Temperature Differences", ylab = "Frequency")
observed_sum <- calculate_temp_differences(temps)
abline(v = observed_sum, col = "red")
p_value_upper <- sum(temps_distribution >= observed_sum) / num_simulations
p_value_upper * 2
p_value_upper <- mean(temps_distribution >= observed_sum)
p_value_upper * 2
p_value_upper <- mean(temps_distribution >= observed_sum)
p_value_upper
calculate_temp_differences <- function(temps) {
temp_diffs <- diff(temps)
return(sum(temp_diffs))
}
NMC <- 1e6
temps_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps)
temps_distribution[i] <- calculate_temp_differences(sampled_temps)
}
hist(temps_distribution, breaks = 50, col = "blue", border = "white",
main = "Histogram of Simulated Temperature Differences",
xlab = "Sum of Temperature Differences", ylab = "Frequency")
observed_sum <- calculate_temp_differences(temps)
abline(v = observed_sum, col = "red")
p_value_upper <- mean(temps_distribution >= observed_sum)
p_value_upper
temp <- read.csv("annual_avg_temp.csv")
temps <- temp$Annual.Average.Temperature.F
plot(temp, type="l")
temp
temp <- read.csv("annual_avg_temp.csv")
temps <- temp$Annual.Average.Temperature.F
plot(temp, type="l")
years <- temp$Year
calculate_slope <- function(temps, years) {
lm_model <- lm(temps ~ years)
return(coef(lm_model)[2])
}
NMC <- 1e6
slope_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps)
slope_distribution[i] <- calculate_slope(sampled_temps, years)
}
calculate_slope <- function(temps, years) {
lm_model <- lm(temps ~ years)
return(coef(lm_model)[2])
}
NMC <- 1e5
slope_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps)
slope_distribution[i] <- calculate_slope(sampled_temps, years)
}
hist(slope_distribution, breaks = 50, col = "blue", border = "white",
main = "Histogram of Simulated Slopes",
xlab = "Slope", ylab = "Frequency")
observed_slope <- calculate_slope(temps, years)
abline(v = observed_slope, col = "red")
p_value <- mean(abs(slope_distribution) >= abs(observed_slope))
p_value
p_value <- mean(abs(slope_distribution) >= abs(observed_slope))
observed_slope
p_value
calculate_slope <- function(temps, years) {
lm_model <- lm(temps ~ years)
return(coef(lm_model)[2])
}
NMC <- 3e5
slope_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps)
slope_distribution[i] <- calculate_slope(sampled_temps, years)
}
hist(slope_distribution, breaks = 50, col = "blue", border = "white",
main = "Histogram of Simulated Slopes",
xlab = "Slope", ylab = "Frequency")
observed_slope <- calculate_slope(temps, years)
abline(v = observed_slope, col = "red")
temp <- read.csv("annual_avg_temp.csv")
temps <- temp$Annual.Average.Temperature.F
plot(temp, type="l")
calculate_temp_differences <- function(temps) {
temp_diffs <- diff(temps)
return(sum(temp_diffs))
}
NMC <- 1e6
temps_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps)
temps_distribution[i] <- calculate_temp_differences(sampled_temps)
}
calculate_temp_differences <- function(temps) {
temp_diffs <- diff(temps)
return(sum(temp_diffs))
}
NMC <- 1e5
temps_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps)
temps_distribution[i] <- calculate_temp_differences(sampled_temps)
}
hist(temps_distribution, breaks = 50, col = "blue", border = "white",
main = "Histogram of Simulated Temperature Differences",
xlab = "Sum of Temperature Differences", ylab = "Frequency")
observed_sum <- calculate_temp_differences(temps)
abline(v = observed_sum, col = "red")
p_value_upper <- mean(temps_distribution >= observed_sum)
p_value_upper
years <- temp$Year
calculate_slope <- function(temps, years) {
lm_model <- lm(temps ~ years)
return(coef(lm_model)[2])
}
NMC <- 1e5
slope_distribution <- numeric(NMC)
for (i in 1:NMC) {
sampled_temps <- sample(temps)
slope_distribution[i] <- calculate_slope(sampled_temps, years)
}
hist(slope_distribution, breaks = 50, col = "blue", border = "white",
main = "Histogram of Simulated Slopes",
xlab = "Slope", ylab = "Frequency")
observed_slope <- calculate_slope(temps, years)
abline(v = observed_slope, col = "red")
p_value <- mean(abs(slope_distribution) >= abs(observed_slope))
p_value
X <- read.csv("uniform_sample.csv")$x
X
